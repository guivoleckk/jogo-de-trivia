{"ast":null,"code":"var _jsxFileName = \"/home/guilherme/\\xC1rea de Trabalho/trivia-redux/sd-029-b-project-trivia-react-redux/src/pages/Game.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { fetchImage, fetchQuestions } from '../services';\nimport { actionSetScore } from '../redux/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sortNumber = 0.5;\nclass Game extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      questions: [],\n      correctAnswer: '',\n      currentQuestion: '',\n      currentAnswers: [],\n      currentCategory: '',\n      currentIndex: 0,\n      currentDifficulty: '',\n      result: false,\n      isCorrect: false,\n      correctColor: '3px solid',\n      wrongColor: '3px solid',\n      timer: 30,\n      endTimer: false,\n      isRunning: true\n    };\n    this.getQuestions = async () => {\n      const {\n        history\n      } = this.props;\n      const token = localStorage.getItem('token');\n      const TOTAL_QUESTIONS = 5;\n      const LOGOUT_CODE = 3;\n      const questions = await fetchQuestions(TOTAL_QUESTIONS, token);\n      console.log(questions);\n      if (questions.response_code === LOGOUT_CODE) {\n        localStorage.removeItem('token');\n        history.push('/');\n        return;\n      }\n      const answers = [...questions.results[0].incorrect_answers, questions.results[0].correct_answer];\n      this.setState({\n        questions: questions.results,\n        correctAnswer: questions.results[0].correct_answer,\n        currentAnswers: answers.sort(() => Math.random() - sortNumber),\n        currentQuestion: questions.results[0].question,\n        currentCategory: questions.results[0].category,\n        currentDifficulty: questions.results[0].difficulty\n      });\n    };\n    this.handleAnswers = item => {\n      const {\n        correctAnswer\n      } = this.state;\n      this.setState({\n        result: true,\n        isCorrect: item === correctAnswer,\n        correctColor: '3px solid rgb(6, 240, 15)',\n        wrongColor: '3px solid red',\n        isRunning: false\n        // timer: 0,\n      }, this.handleScore);\n    };\n    this.handleScore = () => {\n      const {\n        currentDifficulty,\n        isCorrect,\n        timer\n      } = this.state;\n      const {\n        dispatch\n      } = this.props;\n      if (isCorrect) {\n        let difficultyScore = 0;\n        const hardScore = 3;\n        switch (currentDifficulty) {\n          case 'hard':\n            difficultyScore = hardScore;\n            break;\n          case 'medium':\n            difficultyScore = 2;\n            break;\n          case 'easy':\n            difficultyScore = 1;\n            break;\n          default:\n            break;\n        }\n        const initialScore = 10;\n        const score = initialScore + timer * difficultyScore;\n        dispatch(actionSetScore(score));\n      }\n    };\n    this.handleTimer = () => {\n      const {\n        timer,\n        isRunning\n      } = this.state;\n      if (timer === 0 || !isRunning) {\n        clearInterval(this.timerId);\n      } else {\n        this.setState(prevState => ({\n          timer: prevState.timer - 1\n        }));\n      }\n    };\n    this.handleNext = () => {\n      const {\n        currentIndex,\n        questions\n      } = this.state;\n      const {\n        history,\n        name,\n        email,\n        score\n      } = this.props;\n      const nextIndex = currentIndex + 1;\n      const SET_INTERVAL = 1000;\n      if (nextIndex < questions.length) {\n        const answers = [...questions[nextIndex].incorrect_answers, questions[nextIndex].correct_answer];\n        this.setState({\n          correctAnswer: questions[nextIndex].correct_answer,\n          currentAnswers: answers.sort(() => Math.random() - sortNumber),\n          currentQuestion: questions[nextIndex].question,\n          currentCategory: questions[nextIndex].category,\n          currentDifficulty: questions[nextIndex].difficulty,\n          currentIndex: nextIndex,\n          timer: 30,\n          correctColor: '3px solid',\n          wrongColor: '3px solid',\n          isRunning: true,\n          result: false,\n          isCorrect: false,\n          endTimer: false\n        }, () => {\n          this.timerId = setInterval(() => this.handleTimer(), SET_INTERVAL);\n        });\n      }\n      if (nextIndex === questions.length) {\n        history.push('/feedback');\n        const ranking = JSON.parse(localStorage.getItem('ranking'));\n        const newRanking = [...ranking, {\n          name,\n          image: fetchImage(email),\n          score\n        }];\n        localStorage.setItem('ranking', JSON.stringify(newRanking));\n      }\n    };\n  }\n  componentDidMount() {\n    const SET_INTERVAL = 1000;\n    this.getQuestions();\n    this.timerId = setInterval(() => this.handleTimer(), SET_INTERVAL);\n    if (!JSON.parse(localStorage.getItem('ranking'))) {\n      localStorage.setItem('ranking', JSON.stringify([]));\n    }\n  }\n  componentDidUpdate() {\n    const {\n      timer,\n      result\n    } = this.state;\n    if (timer === 0 && result === false) {\n      this.setState({\n        result: true,\n        endTimer: true,\n        correctColor: '3px solid rgb(6, 240, 15)',\n        wrongColor: '3px solid red'\n      });\n    }\n  }\n  render() {\n    const {\n      currentAnswers,\n      currentQuestion,\n      currentCategory,\n      isCorrect,\n      result,\n      correctAnswer,\n      questions,\n      correctColor,\n      wrongColor,\n      timer,\n      endTimer\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: timer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          \"data-testid\": \"question-category\",\n          children: currentCategory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), result && !endTimer && (isCorrect ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Correto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Errado\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }, this)), result && endTimer && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Acabou o tempo!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          dangerouslySetInnerHTML: {\n            __html: currentQuestion\n          },\n          \"data-testid\": \"question-text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          \"data-testid\": \"answer-options\",\n          children: currentAnswers\n          // .sort(() => Math.random() - sortNumber)\n          .map((item, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            dangerouslySetInnerHTML: {\n              __html: item\n            },\n            disabled: result,\n            \"data-testid\": item === correctAnswer ? 'correct-answer' : `wrong-answer-${index}`,\n            \"aria-label\": item,\n            style: {\n              border: item === correctAnswer ? correctColor : wrongColor\n            },\n            onClick: () => this.handleAnswers(item)\n          }, item, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), result && /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: this.handleNext,\n          \"data-testid\": \"btn-next\",\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this);\n  }\n}\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired\n};\nconst mapStateToProps = state => ({\n  name: state.player.name,\n  email: state.player.gravatarEmail,\n  score: state.player.score\n});\nexport default connect(mapStateToProps)(Game);","map":{"version":3,"names":["React","Component","PropTypes","connect","Header","fetchImage","fetchQuestions","actionSetScore","sortNumber","Game","state","questions","correctAnswer","currentQuestion","currentAnswers","currentCategory","currentIndex","currentDifficulty","result","isCorrect","correctColor","wrongColor","timer","endTimer","isRunning","getQuestions","history","props","token","localStorage","getItem","TOTAL_QUESTIONS","LOGOUT_CODE","console","log","response_code","removeItem","push","answers","results","incorrect_answers","correct_answer","setState","sort","Math","random","question","category","difficulty","handleAnswers","item","handleScore","dispatch","difficultyScore","hardScore","initialScore","score","handleTimer","clearInterval","timerId","prevState","handleNext","name","email","nextIndex","SET_INTERVAL","length","setInterval","ranking","JSON","parse","newRanking","image","setItem","stringify","componentDidMount","componentDidUpdate","render","__html","map","index","border","propTypes","shape","func","isRequired","string","number","mapStateToProps","player","gravatarEmail"],"sources":["/home/guilherme/Área de Trabalho/trivia-redux/sd-029-b-project-trivia-react-redux/src/pages/Game.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { fetchImage, fetchQuestions } from '../services';\nimport { actionSetScore } from '../redux/actions';\n\nconst sortNumber = 0.5;\n\nclass Game extends Component {\n  state = {\n    questions: [],\n    correctAnswer: '',\n    currentQuestion: '',\n    currentAnswers: [],\n    currentCategory: '',\n    currentIndex: 0,\n    currentDifficulty: '',\n    result: false,\n    isCorrect: false,\n    correctColor: '3px solid',\n    wrongColor: '3px solid',\n    timer: 30,\n    endTimer: false,\n    isRunning: true,\n  };\n\n  componentDidMount() {\n    const SET_INTERVAL = 1000;\n    this.getQuestions();\n    this.timerId = setInterval(() => this.handleTimer(), SET_INTERVAL);\n    if (!JSON.parse(localStorage.getItem('ranking'))) {\n      localStorage.setItem('ranking', JSON.stringify([]));\n    }\n  }\n\n  componentDidUpdate() {\n    const { timer, result } = this.state;\n    if (timer === 0 && result === false) {\n      this.setState({\n        result: true,\n        endTimer: true,\n        correctColor: '3px solid rgb(6, 240, 15)',\n        wrongColor: '3px solid red',\n      });\n    }\n  }\n\n  getQuestions = async () => {\n    const { history } = this.props;\n    const token = localStorage.getItem('token');\n    const TOTAL_QUESTIONS = 5;\n    const LOGOUT_CODE = 3;\n    const questions = await fetchQuestions(TOTAL_QUESTIONS, token);\n    console.log(questions);\n    if (questions.response_code === LOGOUT_CODE) {\n      localStorage.removeItem('token');\n      history.push('/');\n      return;\n    }\n    const answers = [...questions.results[0].incorrect_answers,\n      questions.results[0].correct_answer];\n    this.setState({\n      questions: questions.results,\n      correctAnswer: questions.results[0].correct_answer,\n      currentAnswers: answers.sort(() => Math.random() - sortNumber),\n      currentQuestion: questions.results[0].question,\n      currentCategory: questions.results[0].category,\n      currentDifficulty: questions.results[0].difficulty,\n    });\n  };\n\n  handleAnswers = (item) => {\n    const { correctAnswer } = this.state;\n    this.setState({\n      result: true,\n      isCorrect: item === correctAnswer,\n      correctColor: '3px solid rgb(6, 240, 15)',\n      wrongColor: '3px solid red',\n      isRunning: false,\n      // timer: 0,\n    }, this.handleScore);\n  };\n\n  handleScore = () => {\n    const { currentDifficulty, isCorrect, timer } = this.state;\n    const { dispatch } = this.props;\n    if (isCorrect) {\n      let difficultyScore = 0;\n      const hardScore = 3;\n      switch (currentDifficulty) {\n      case 'hard':\n        difficultyScore = hardScore;\n        break;\n      case 'medium':\n        difficultyScore = 2;\n        break;\n      case 'easy':\n        difficultyScore = 1;\n        break;\n      default:\n        break;\n      }\n      const initialScore = 10;\n      const score = initialScore + (timer * difficultyScore);\n      dispatch(actionSetScore(score));\n    }\n  };\n\n  handleTimer = () => {\n    const { timer, isRunning } = this.state;\n    if (timer === 0 || !isRunning) {\n      clearInterval(this.timerId);\n    } else {\n      this.setState((prevState) => ({\n        timer: prevState.timer - 1,\n      }));\n    }\n  };\n\n  handleNext = () => {\n    const { currentIndex, questions } = this.state;\n    const { history, name, email, score } = this.props;\n    const nextIndex = currentIndex + 1;\n    const SET_INTERVAL = 1000;\n    if (nextIndex < questions.length) {\n      const answers = [...questions[nextIndex].incorrect_answers,\n        questions[nextIndex].correct_answer];\n      this.setState({\n        correctAnswer: questions[nextIndex].correct_answer,\n        currentAnswers: answers.sort(() => Math.random() - sortNumber),\n        currentQuestion: questions[nextIndex].question,\n        currentCategory: questions[nextIndex].category,\n        currentDifficulty: questions[nextIndex].difficulty,\n        currentIndex: nextIndex,\n        timer: 30,\n        correctColor: '3px solid',\n        wrongColor: '3px solid',\n        isRunning: true,\n        result: false,\n        isCorrect: false,\n        endTimer: false,\n      }, () => {\n        this.timerId = setInterval(() => this.handleTimer(), SET_INTERVAL);\n      });\n    }\n    if (nextIndex === questions.length) {\n      history.push('/feedback');\n      const ranking = JSON.parse(localStorage.getItem('ranking'));\n      const newRanking = [...ranking, {\n        name,\n        image: fetchImage(email),\n        score,\n      }];\n      localStorage.setItem('ranking', JSON.stringify(newRanking));\n    }\n  };\n\n  render() {\n    const { currentAnswers,\n      currentQuestion,\n      currentCategory,\n      isCorrect,\n      result,\n      correctAnswer,\n      questions, correctColor, wrongColor, timer, endTimer } = this.state;\n    return (\n      <div>\n        <Header />\n        {questions.length > 0 && (\n          <p>{timer}</p>\n        )}\n        <section>\n          <h3\n            data-testid=\"question-category\"\n          >\n            {currentCategory}\n\n          </h3>\n          {result && !endTimer && (\n            isCorrect ? (\n              <p>Correto</p>\n            ) : (\n              <p>Errado</p>\n            )\n          )}\n          {result && (\n            endTimer && (\n              <p>Acabou o tempo!</p>\n            )\n          )}\n          <p\n            dangerouslySetInnerHTML={ { __html: currentQuestion } }\n            data-testid=\"question-text\"\n          />\n          <section data-testid=\"answer-options\">\n            {currentAnswers\n              // .sort(() => Math.random() - sortNumber)\n              .map((item, index) => (\n                <button\n                  key={ item }\n                  type=\"button\"\n                  dangerouslySetInnerHTML={ { __html: item } }\n                  disabled={ result }\n                  data-testid={\n                    item === correctAnswer ? 'correct-answer' : `wrong-answer-${index}`\n                  }\n                  aria-label={ item }\n                  style={ {\n                    border: item === correctAnswer ? correctColor : wrongColor } }\n                  onClick={ () => this.handleAnswers(item) }\n                />\n              ))}\n          </section>\n          {result && (\n            <button\n              type=\"button\"\n              onClick={ this.handleNext }\n              data-testid=\"btn-next\"\n            >\n              Next\n\n            </button>\n          )}\n        </section>\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  dispatch: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  email: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.player.name,\n  email: state.player.gravatarEmail,\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(Game);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}